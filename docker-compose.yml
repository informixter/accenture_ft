version: '3.5'
services:
  postgres:
    hostname: postgres
    image: library/postgres:12-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./tmp/pgdata:/data/postgres
    ports:
      - 5432:5432
    networks:
      - backend
  jupyter:
    hostname: jupyter
    build:
      context: jupyter
      dockerfile: Dockerfile
    ports:
      - "8888:8888"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres/${POSTGRES_DB}
    restart: unless-stopped
    command: [ "jupyter", "notebook", "--port=8888", "--no-browser", "--ip=0.0.0.0", "--allow-root" ,"--NotebookApp.token='${JUPYTER_TOKEN}'" , "--NotebookApp.base_url='/'" ]
    volumes:
      - ./notebooks:/root/airflow/notebooks
    networks:
      - backend
  php:
    build:
      context: api
      dockerfile: Dockerfile
    volumes:
      - ./api/app:/var/www/html
    networks:
      - backend
  front:
    hostname: front
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - 8090:80
    networks:
      - backend
    volumes:
      - ./api/front:/usr/share/nginx/html
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - ./api/default.conf:/etc/nginx/nginx.conf
      - asset-volume:/app
    depends_on:
      - php
    networks:
      - backend
  traefik:
    image: traefik:v2.3
    restart: unless-stopped
    command:
      - --configFile=/traefik.yml
      - --providers.docker=true
    ports:
      - 80:80
      - 443:443
    networks:
      - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik.yml:/traefik.yml
      - ./tmp/ssl:/ssl
networks:
  backend:
    driver: bridge
volumes:
  asset-volume:
